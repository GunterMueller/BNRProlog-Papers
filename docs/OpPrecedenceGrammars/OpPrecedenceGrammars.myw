[MyWordDocStyle]
## Operator Precedence Grammars

**William J. Older**
Computing Research Laboratory
Bell-Northern Research
P.O. Box 3511, Station C
K1Y 4H7, Ottawa, Ontario

### Abstract

The abstract syntax of (BNR) Prolog is an operator precedence grammar with the addition of several types of brackets. Operator precedence grammars, which was one of the first classes of grammars formally investigated, have the advantage of allowing for very fast (and small) deterministic parsers, yet allow a considerable degree of linguistic flexibility. Unlike the grammar classes used in most conventional languages, which require a fixed syntax description, operator precedence grammars allow for a dynamically extendible syntax, i.e., by standardizing the grammar class the grammar itself can become variable, but with side-effect of making the grammar inexpressible in conventional formalisms such as BNF. This situation is complicated by the presence of the several types of brackets (lists, functors, parentheses, braces) and possible non-determinism (ambiguity) introduced by allowing a single symbol to name different operators, and by the overloading of comma. Although the proposed standard for Prolog carefully restricts operator non-determinism in order to avoid ambiguity, the construction of efficient implementations becomes more complex. This paper examines these issues in the context of the new BNR Prolog system.


### Two stack model for operator precedence grammars

The most efficient technique for parsing operator precedence grammars is to use two intermediate stacks, one for operands and one for operators, and an external stack or heap. The stacking decision mechanism, which determines whether one reduces the top operator, pushes the new operator, or reports a syntax error is then determined by comparing the precedences of the top operator (L) and the new operator (R):

.pre
			if L < R then reduce
			if L > R then push.

Here larger precedence values denotes weaker binding of operators. Reduction takes the top operator and the proper number of operands (in reverse order), constructs the corresponding term and pushes its reference back onto the operand stack.

For uniformity, special operators corresponding to the beginning and the end of the expression (e.g. '|-' and '-|') are usually added, with '|-' = '-|' > R and for all normal R. The final state of the parse has opstack=[' |-'], operand stack containing the final expression, and the input token ='-|', or, alternatively, one adds the transition by which '-|' cancels '|-', leaving the operator stack and token empty. Note that operands can alternatively be treated as if they were niladic operators with a precedence lower than that of any operator; the next operator will then force a reduction which just moves the operand to the operand stack. (We will need to make use of this below.)

This simple scheme needs refinement when different operator occurrences have equal precedence, for then the parsing of '`x o y o z`' is ambiguous, i.e. either left-associative `((x o y) o z)` or right associative `(x o (y o z))`. To distinguish these cases Prolog uses the notion of operator type, where left-associative is denoted by **yfx** and right-associative by **xfy**. In addition, non-associative operators, denoted by **xfx**, would produce an error in such a case. Here the **x** denotes an expression which must be of strictly lower precedence, while **y** denotes an expression of lower or same precedence.

A second refinement is necessary when prefix and postfix operators are used. Their types are denoted similarly by **fx** and **fy** for prefix operators, and **xf** and **yf** for postfix operators. Since if a reduction is done, the reduced operator becomes a subordinate term for the new operator, the first rule must be amended by adding the condition that R be either infix or postfix. Similarly the second rule requires that L be either infix or prefix. The reduction rules are now:

.pre
			L < R and R in {xfx,xfy,yfx,yf,xf} =>reduce
			L > R and L in {xfx,xfy,yfx,fy,fx} => push
			else error.

Similar reasoning applied to the equal precedence case gives the rule:

.pre
			L = R and R in {yfx,yf} => reduce
			L = R and L in {xfy,fy} => push
			else error.

### Operand ambiguity

When operators are to be mentioned as operands, it is usual to require that they be parenthesized or quoted. This requirement can be eased in most cases, if one allows the parser to determine from context whether an operator or operand is intended.

A general (non-parenthesized) expression has the form given by the regular expression:

.pre
			`[p* o s* i]* p* o s*.`

The corresponding state machine is:


When the precedence rules are combined with this state machine, the restrictions intersect in state 0 to produce:

State 0 (expecting operand, R must be in {fx,fy})

.pre
			L > R and L in {xfx, xfy,yfx,fy,fx} => push
			L = R and L in {xfy,fy} =>push
			else error.

State 1 (expecting operator, R must be in {xfx,xfy,yfx,xf,yf} )

.pre
			L < R and R in {xfx,xfy,yfx, yf,xf} => reduce
			L > R and L in {xfx, xfy,yfx,fy,fx} => push
			L = R and R in {yfx,yf} => reduce
			L = R and L in {xfy,fy} => push
			else error.

In this two-state model it is easy to add some 'controlled ambiguity' by allowing any operator to be treated as an operand in state 0. (Operands are not allowed in state 1.) To avoid actual ambiguity, this coercion is only invoked if there would otherwise have been an error. This allows quotes to be omitted in expressions such as `not * = +` , which would parse as if written `not ('*' = '+')` .

### Operator ambiguity

The proposed Prolog standard permits the same symbol to be used for several different operators, subject to the restrictions:
- only one occurrence in each class (infix,prefix,postfix)
- not both prefix and postfix.
In addition there is specified the following global constraint: among all the operators of the same precedence, there is
- not both (yfx or yf) and (xfy or fy).
This global restriction is intended to eliminate ambiguities such as:
.pre			x s y t z
where s and t have the same precedence, and s has type xfy and t has type yfx.
This leaves the following 17 possibilities for a single symbol (same precedence):
- xf, yf, xfx, yfx, xfy, fx, fy
- xf + xfx, xf + xfy, xf + yfx, yf + xfx, yf + yfx
- fx + xfx, fx + xfy, fx + yfx, fy + xfx, fy + xfy.
In a general operator sequence such as x p q y , the possible parses are:
.pre
			a) ((x p) q y) where p is postfix and q is infix
		or	b) ( x p (q y)) where p is infix and q is prefix.

When p is either postfix or infix, and q is either infix or prefix, the cases may be distinguished by precedence: if p < q then case (a) applies, while p > q is only valid in case (b). When p=q, the third and fourth restrictions above ensure that at most one parse exists, (a)if q is yfx and (b)if q is yf. The principle used is the same as that used in operand coercion, i.e. interpret the expression in whatever way which avoids syntax errors. (Such a principle , to be useful, presupposes that there is at most one correct parse.)

Let us consider a more complicated example:

.pre
			x sl s2 s3 pl p2 y

where s1,s2,s3 are either infix or postfix, and p1,p2 are either infix or prefix, and suppose sl < s2 < s3 < p1 >p2 are the precedence relations. When the operator s1 token is read, it is indeterminate whether it is infix or postfix, so both versions must be pushed on the opstack. When s2 is read, it forces s1 to be interpreted as postfix, but s2 must be pushed as indeterminate. Similarly s3 determinizes s2. The precedence relation determines that pl must be infix, and thereby determinizes s3 (as well as p2). Note that at most the top operator on the stack is indeterminate at any time, and that it becomes determinate before the next operator is pushed, i.e. it is determinate before it is emitted as a heap constructor, so back-tracking can be avoided.

In the analogous case x s1 < s2 < s3 = p1 > p2 y, with s3 having the same precedence as p1, there is no ambiguity because of the global restriction:
.pre
			possibilities for s3: xfy or xf
			possibilities for p1: fx or yfx ,
but the global restriction ensures that at most one of them is infix.

There is, however, an ambiguity which does not seem to have been eliminated in the proposed standard (which seems to allow each usage of an operator symbol to have a different precedence):
.pre
			x s t y
where s is postfix with precedence sp or infix with precedence si
and t is prefix with precedence tp or infix with precedence ti
and sp < ti and si > tp. This allows two different parses:
.pre
			(x sp) ti y or x si (tp y)
which in general cannot be resolved by context. One way to avoid this is to add the restriction (as BNR Prolog currently does) that *all uses of the same operator symbol must have the same precedence*.

### Operator and Operand Ambiguity

When both forms of "ambiguity" are allowed there is the additional possibility of the operator on the top of the stack becoming an operand because of the constraints imposed by its neighbors. The code for reduction must therefore test for this case.

### Implementation

An efficient implementation for the M68020 is given below:
~~~
;		Register usage
;			a0- scratch			d0- action, scratch
;			a1-					dl- value
;			ce- opd stack		d2-
;			a3-					d3- scratch
;			a4-					d4- scratch
;			a5-					d5-
;			a6- hp				d6-
;			a7- sp =op stack	d7-
;
;	A global 'state' has value 0 when expecting operand, else 1.
;**********************************************************************
;	Restrictions:
;		* each symbol can have at most one precedence
;		* each symbol can belong to one of the 17 classes
;				mentioned above, or else is not an operator
;		* all operators at the same precedence level have
;				y on the same side (left, right) if present
;
;	approximate times are indicated in 68020 cycles (cache case)


Parse		clr.b state			; 4 state:= expecting operand
			bra.b Next			; 4,6

Operand		tst.b state			; if Operand expected
			bne.b Syn_err		; 4,6
Opand2		move.l d1,(ce)+		; 9 push value onto operand stack
			SET state			; state=1 for operator expected

Next		NEXTTOKEN d0,d1		; d0 is action, d1 is value
			jmp @act(pc,d0*2)	; 10 case action of
@act		bra.b Operand		; 6 operand
			bra.b Operator		; 6 operator
			...					; brackets, etc.

; optype is coded as a long word with precedence (0 .. 1200) in low
; word and type coded as 7-bits in upper word:
;			[ ......... xfx,xfy,yfx,fx,fy,yf,yx | precedence]

unary= $0F						; fx,fy yf,yx
binary= $70						; xfx, yfx,xfy
prefix= $0C						; fx,fy
postfix = $03					; xf,yf
pre_y = $12						; yfx,yf
post_y= $24						; xfy,fy
not_post = $7C					; xfx,xzy,yfx,fx,fy
not_pre = $73					; xfx,xzy,yfx,xf,yf

Operator	GETOPTYPE d1, d0	; d0 = [ type | precedence]
			tst.l d0			; 2 =0 if not an operator
			beq.b Operand		; 4,6
			tst.b state			; if expecting operand
			bne.b Rloop			; 4,6 then(
			swap.l d0
			andi.b #prefix,d0	; 7 must be prefix
			beq.b Opand2		; 4,6 else treat as operand
			swap.l d0
			
Rloop		move.l (sp),d3		; 9 L from op stack
			cmp.w d0,d3			; 2 compare precedences
			blt.b Reducechk		; 4,6 L < R
			bgt.b Pushchk		; 4,6 L > R
			; equal precedences, use types to discriminate
			move.l d0,d4		; 2 copy d0 (R)
			swap.l d4			; 2 get optype in low word
			andi.b #pre_y,d4	; 7 if R in {yf, yfx}
			bne.b Reduce1		; 4,6 then reduce
			swap.l d3			; else
			andi.b #post_y,d3	; 7 if L not in {fy,xfy}
			beq.b Syn_err		; 4,6 then treat as operand
			swap.l d3			; 2 else update top of op stack
			move.l d3,(sp)		; 9 and push operator
			bra.b Pushop		; 6
			
Pushchk		swap.l d3			; 2 L must be
			andi.b #not_post,d3	; 7 in not_post
			beq.b Syn_err		; 4,6 else syntax error
			move.l d3,(sp)		; 8 update L
			
Pushop		move.l d1,-(sp)		; 9 push operator name
			move.l d0,-(sp)		; 9 and type
			swap.l d0			; 2 if optype
			andi.b #unary,d0	; 7 was possibly unary
			bne.b Next			; 4,6 then continue same state
			clr.b state			; 4 else state:= expect operand
			bra.b Next
			
Reduce1		swap.l d4			; 2 update d0
			move.l d4,d0		; 2
			bra.b Reduce		; 4,6
			
Reducechk	swap.l d0			; 2 getR type
			andi.b #not_pre,d0	; 7 R must be in
not_pre
			beq.b Syn_err		; 4,6 else syntax error
			swap.l d0			; 2
Reduce		move.l (sp)+,d3		; 2 copy type of top op
			beq.b Syn_err		; 4,6
			swap.l d3			; 2
			tst.b d3			; 2 extra check
			beq.b Syn_err		; 4,6
			move.l d3,d4		; 2 copy it
			andi.b #binary,d4	; 7 if not pos binary
			bne.b Dyadic		; 4,6 then
				; unary op
			move.l hp,d4 ; 2 save top of heap
			move.l #unaryhdr,(hp)+	; 13 structure header
			move.l (sp)+,(hp)+	; 13 principal functor
			move.l -(ce),(hp)+	; 13 first arg
			bra.b Endst			; 6
			; check for binary op
Dyadic		andi.b #unary,d3	; 7 if not pos unary
			bne.b Syn_err		; 4,6 then {
			move.l hp,d4		; 2 save top of heap
			move.l #binaryhdr,(hp)+	; 13 structure header
			move.l (sp)+,(hp)+	; 13 principal functor
			move.l -(ce),d3		; 10 get second arg
			move.l -(ce),(hp)+	; 13 first arg
			move.l d3, (hp)+	; 10 put second arg
Endst		clr.l (hp)+			; 9 end of sequence
			bset.l #sgn,d4		; 4 make structure
			move.l d4,(ce)+		; 10 put back on stack
			bra Rloop			; 6 continue reducing}
~~~

### Brackets and Commas

Standard prolog overloads ','and ')'. Comma is used to denote three completely different things: the separator between arguments of a functor (corresponding generally to succession in memory), the separator between list items (where `[a,b]` is shorthand for `a.b.nil`), and as the 'and' operator in clauses. The syntax of "uses as separator" is in principle different from that of the and operator in that it ought to have the maximum (weakest) precedence possible. The standard proposal avoids this syntactic distinction by stating that items in lists or functors shall (must?) have lower precedence value than that of the 'and' operator, but this does not seem to be much help. From the point of view of implementations, it still requires that ',' be treated in two syntactically different ways if this rule is to be enforced; from the viewpoint of users a uniform syntax for comma is misleading when it masks radically different data structures.

BNR Prolog has departed tradition by making ',' uniformly a separator, both syntactically and semantically. This provides in part several of the usueful features of BNR Prolog, such as list-structure conversions and meta-call, and vastly simplifies the writing of metainterpreters. However, it does create occasional porting problems for Edinburgh code which relies heavily on the use of ';'.

The overloading of ')' stems from its use as a right parenthesis (for forcing the syntax of an expression) and for the close of a functor. The requirement that there be no space between the functor name and the following '(' , which avoids the possibility of a free-standing tuple such as '(x,y)', helps to avoid ambiguity. (This tuple notation, which is common in mathematics, serves much the same purpose as does list notation, but suffers from the inability to express a 1-tuple since '(x)' is equivalent to 'x', since the tuple notation is indistinguishable from parenthesization. Currently BNR Prolog regards the free-standing tuple as a syntax error in all contexts.)

There are the following sets ofbrackets to be dealt with:
.pre
			|_		_|		default expression brackets
			(		)		parentheses
			F(		)		functor brackets
			[		]		list brackets
			\{		}\		curly brackets.
(The last are not part of the proposed standard, but are extremely useful additions to the syntax, apart from any particular interpretation.)

Syntactically speaking in the context of the parser described above, all open brackets (except I_ ) should be treated *as if* they were prefix (**fy**) operators with precedence higher than that of any other operator. (Making them all the same precedence allows arbitrary nesting.) The special brackets |_ (_| ) should be of type **fx** (**xf**) and be of higher precedence. Similarly the close brackets should have type **yf** with the same precedence as the open bracket. This violates the global constraint which was imposed on normal operators, but provides for proper handling of normal operators whenever the top of stack or incoming token is a bracket. The bracket matching check and bracket semantics then replace the push of the right bracket (right brackets are never pushed.) This suggests that we should mark close brackets as having a distinct type (ket), and it is also convenient to do the same with open brackets (bra) where bra is treated as equivalent to **fy** for purposes of operator processing. Note that open brackets only occur in operand- expected state, while close brackets are only permitted in operator-expected state.

Specifically: assign the following op-types:
	|_				bra		\2**11-1\		(i.e. > 1200 )
	_|				ket		\2**11-2\
	func,(,[,(		bra		\2**11-3\		open
	),],)			ket		\2**11-4\		close

and actions:
~~~
initially (i.e. |_) :-
     push (optype(|_, 0) onto stack

final punc (i.e. _|): -
     process close ( drive out any operators on opstack)
     check top of opstack = _|
     length of operandstack should =1
     pop top operand and return from parse

( :-
     push ( optype(open), 0) onto stack
) :-
     process close
     if top operator = ( then pop it
     else if top operator = func
       then { calculate start of operands from arity
              copy sthdr+arity and operands to heap
              push struc-tagged heap ptr back on operand stack
              pop top operator}
     else error (bracket mismatch}

[ :-
     push (optype(open), ce | list) onto stack
] :-
     process close
     if top operator = [
       then {copy operands to heap
             push list-tagged heap ptr onto operand stack
             pop operator}
       else error
	   
	   
func :-
     push ( optype(open), strhdr+ 1) onto stack
     push value onto operand stack

{ :-
     push (optype(open), strhdr + 1) onto stack
     push symbol '{}' onto operand stack

} :-
     same as func...)


, (separator) :-
     process optype(,) (should drive out ops except for opens)
     if top op is bra
         then if top op is func then increment arity
         else if top op is ( then error (no tuples allowed)
     else error ( list as separator )
~~~
The problem with this approach is one of compatibility with respect to ',' as operator; in particular, it would require bracketing of clause bodies and conjunctive queries, since the ',' is always treated as a separator. One way to get around this (as in current BNR Prolog) is to do some context-sensitive coercions such as treating ',' explicitly as an operator in certain contexts, but this has the drawback (as in standard Prolog) that clause bodies are no longer standard lists. As an alternative, however, one can insist that comma is always a separator but supply brackets in those contexts that require them. This would, for example, coerce the clause written `a :- b, c, d.` into `a:-[b,c,d]`.

The mechanism to do this would be to treat ',' as having the standard Edinburgh precedence level of 1000, but after reducing any lower precedence operators, insisting that the top operator be a left bracket, and supplying one if necessary. The punctuation handler must likewise be prepared to close a (single) bracket if necessary. This would handle the case of ':-' (infix and prefix) and prefix '?-', but there remains a problem with ';'. The standard parse of
.pre
				`a:- b,c;d,e.`
	is			`a:- (b,c);(d,e).`
	while BNR Prolog would currently parse it as:
				`a:- b,(c;d),e.`
(The latter is felt by some people to be more useful or natural, since one is conditioned to expect ',' to be weak, i.e., a separator. This is a straight incompatibility between BNR Prolog and Edinburgh, so whatever one does will make somebody unhappy.)


### Appendix A: Tokenization
@include OpPrecedenceGrammarsAppA.txt

### Appendix B: Byte Codes
@include OpPrecedenceGrammarsAppB.txt

&
	@import ../MyWordDocStyle.mmk
	@import /BNRProlog-Papers/myword/pkgs/box.mmk
	centreblock> .. <- <div class=_centre>
	!` .. `! <- <span class='language-prolog'> text
	>> .. <- <div class=my_hanging> prose
	// for pseudocode blocks, define '$ .. $' for opcodes, disable '_ .. _' (var names)
	pseudocode .. <- <pre class=my_pseudo> prose
	$ .. $ <- <b>
	_ .. _ <-
	\[ <- is [
	.pre .. <- <div style='white-space:pre'> prose
	@css
		._centre {text-align: center;}
		.language-prolog {font:1.2em monospace; font-weight:bold}
		.my_hanging {padding-left:40px; text-indent:-20px}
		pre.my_pseudo {line-height:1.1em}
