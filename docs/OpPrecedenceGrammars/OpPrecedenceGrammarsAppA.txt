Characters are divided into classes which are defined as follows:
      for (i = 0; i LE 255; ++i) {
            charClass[i] = r_invalid;
            if (isascii((char)i)) {
                  if (isdigit((char) i ))
                        charClass[i] = r_digit;
                  else if (isupper((char)i))
                        charClass[i] = r_capital;
                  else if (islower((char)i))
                        charClass[i] = r_letter;
                  else if (isspace((char)i))
                        charClass[i] = r_blank;
                  else if (ispunct((char)i))
                        charClass[i] = r_special;
                  }
            }
charClass[(unsigned char)'$'] = r_letter;
charClass[(unsigned char)'e'] = r_Ereal;
charClass[(unsigned char)'E'] = r_Ecap;
charClass[(unsigned char)'0'] = r_digitO;
charClass[(unsigned char)'_'] = r_bar;
charClass[(unsigned char)'('] = r_lpar;
charClass[(unsigned char)')'] = r_rpar;
charClass[(unsigned char)'['] = r_lbra;
charClass[(unsigned char)']'] = r_rbra;
charClass[(unsigned char)'{'] = r_lcurly ;
charClass[(unsigned char)'}'] = r_rcurly;
charClass[(unsigned char)'\''] = r_quote ;
charClass[(unsigned char)'"'] = r_dquote;
charClass[(unsigned char)'+'] = r_plus;
charClass[(unsigned char)'-'] = r_minus ;
charClass[(unsigned char)'*'] = r_star;
charClass[(unsigned char)'%'] = r_percent;
charClass[(unsigned char)'\n'] = r_cr;
charClass[(unsigned char)'\r'] = r_cr ;
charClass[(unsigned char)'|'] = r_vertical ;
charClass[(unsigned char)'/'] = r_slash;
charClass[(unsigned char)','] = r_comma;
charClass[(unsigned char)'.'] = r_dot;
charClass[(unsigned char)'\\'] = r_backslash;
charClass[(unsigned char)'!'] = r_singleatom;
charClass[(unsigned char)';'] = r_singleatom;
charClass[(unsigned char)'Ï€'] = r_letter;

The tokenization rules are then defined by two arrays (indexed by tokenization state)
of strings (indexed by character class). The stt table gives the next state where the
indexed char minus the character '0' gives the state.

	stt[O]  = "0<<AAF=A00000052>>>00CD0?>0>1";    /* 0 '0' init */
	stt[1]  = "111111111111111111111111:1111";    /* 1 '1' error */
	stt[2]  = "22222222222222242222222223222";    /* 2 '2' in_dq */
	stt[3]  = "22222222222222222222222222222";    /* 3 '3' dq_escape */
	stt[4]  = "00000000000000020000000000000";    /* 4 '4' dq_in_dq */
	stt[5]  = "55555555555555755555555556555";    /* 5 '5' in_q */
	stt[6]  = "55555555555555555555555555555";    /* 6 '6' q_escape */
	stt[7]  = "00000000000000500000000000000";    /* 7 '7' q_in_q */
	stt[8]  = "00000880000000000000000000000";    /* 8 '8' e_digits */
	stt[9]  = "1111188111111111JJ11111111111";    /* 9 '9' e_state */
	stt[10] = "01111111111111111111011111111";    /*10 ':' error_punc */
	stt[11] = "00909;;0000000000000000000000";    /*11 ';' fraction */
	stt[12] = "0<<<<<<<000000000000000000000";    /*12 '<' in_id */
	stt[13] = "0<<<<==<000000EOOOOOOOOOK0000";    /*13 '=' in_int */
	stt[14] = "0000000000000000>>>00>>0>>0>0";    /*14 '>' in_op */
	stt[15] = "0000000000000000>>>HO>G0>00>0";    /*15 '?' in_punc */
	stt[16] = "IIIIIIIIIIIIIIIIIIIIIIIIIIIII";    /*16 '@' in_special */
	stt[17] = "0AAAAAAAOOOOOOOOOOOOOOOOR0000";    /*17 'A' in_var */
	stt[18] = "0BBBBBBB000000000000000000000";    /*18 'B' in_vartail */
	stt[19] = "0>>BB>>B>>O>>>>>>>>OO>P>>>>>>";    /*19 'C' in_vertical */
	stt[20] = ">>>>>>>>>>>>>>>>>>0>>>>>>>>>>";    /*20 'D' init_comment*/
	stt[21] = "0EEEEEE0000000000000000000000";    /*21 'E' int_base*/
	stt[22] = "0<<<<==<000000@000000000K0000";    /*22 'F' int_special */
	stt[23] = ">>>>>>>>>>>>>>>>>>H>>>>>>>>>>";    /*23 'G' punc_comment */
	stt[24] = "00000000000000000000000000000";    /*24 'H' punc_space */
	stt[25] = "00000000000000000000000000000";    /*25 'I' save_special */
	stt[26] = "11111881111111111111111111111";    /*26 'J' to_e_digits */
	stt[27] = "00000;;0000000000000000000000";    /*27 'K' to_fraction */
	stt[28] = "L111111110101011111LL1N111111";    /*28 'L' tv */
	stt[29] = ">>>>>>>>>>>>>>>>>>L>>>>>>>>>>";    /*29 'M' tv_comment */
	stt[30] = "11111111111111111111111111111";    /*30 'N' tv_blank_comnt */
	stt[31] = "000BB00BOOOOOOOOOOOOOOQ000000";    /*31 'O' v_blanks */
	stt[32] = ">>>>>>>>>>>>>>>>>>0>>>>>>>>>>";    /*32 'P' v_comment */
	stt[33] = "11111111111111111101111111111";    /*33 'Q' v_comment2 */
	stt[34] = "111111111111111111111111S1111";    /*34 'R' add_period */
	stt[35] = "????????????????????????T????";    /*35 'S' var_period */
	stt[36] = "LLLLLLLLLLLLLLLL>>>LL>MLLLL>L";    /*36 'T' var_dot_dot */

The sat table defines the semantic action to be performed. The letters are mnemmonic
where possible so, for example, "c" means catenate the current character to a string
variable (to build up a name). Other actions construct appropriate terms on the 
heap etc. Consult the parse.c file for details.

	sat[0]  = "dccccccconbfmjddccc%dccsccAce";    /* 0 '0' init */
	sat[1]  = "ddddddddddddddddddddddddddddd";    /* 1 '1' error */
	sat[2]  = "cccccccccccccccdccccccccccccc";    /* 2 '2' in_dq */
	sat[3]  = "ccccccccccccccccccccccccccccc";    /* 3 '3' dq_escape */
	sat[4]  = "qqqqqqqqxqqqqqqcqqqqqqqqqqqqq";    /* 4 '4' dq_in_dq */
	sat[5]  = "ccccccccccccccdcccccccccccccc";    /* 5 '5' in_q */
	sat[6]  = "ccccccccccccccccccccccccccccc";    /* 6 '6' q_escape */
	sat[7]  = "qqqqqqqqxqqqqqcqqqqqqqqqqqqqq";    /* 7 '7' q_in_q */
	sat[8]  = "rrrrrccrrrrrrrrrrrrrrrrrrrrrr";    /* 8 '8' e_digits */
	sat[9]  = "eeeeecceeeeeeeeecceeeeeeeeeee";    /* 9 '9' e_state */
	sat[10] = "kdddddddddddddddddddkdddddddd";    /*10 ':' error_punc */
	sat[11] = "rrcrcccrrrrrrrrrrrrrrrrrrrrrr";    /*11 ';' fraction */
	sat[12] = "acccccccwaaaaaaaaaaaaaaaaaaaa";    /*12 '<' in_id */
	sat[13] = "iccccccciiiiiiciiiiiiiiiciiii";    /*13 '=' in_int */
	sat[14] = "aaaaaaaaaaaaaaaacccaaccaccaca";    /*14 '>' in_op */
	sat[15] = "haaaaaaaaaaaaaaaccc%hccacaaca";    /*15 '?' in_punc */
	sat[16] = "ccccccccccccccccccccccccccccc";    /*16 '@' in_special */
	sat[17] = "vcccccccVvvvvvvvvvvvvvvvvvvvv";    /*17 'A' in_var */
	sat[18] = "tcccccccttttttttttttttttttttt";    /*18 'B' in_vartail */
	sat[19] = "dDDyyDDyDDYDDDDDDDD%dDcDDDDDD";    /*19 'C' in_vertical */
	sat[20] = "DDDDDDDDDDDDDDDDDD/DDDDDDDDDD";    /*20 'D' init_comment*/
	sat[21] = "icccccciiiiiiiiiiiiiiiiiiiiii";    /*21 'E' int_base*/
	sat[22] = "iccccccciiiiiiciiiiiiiiiciiii";    /*22 'F' int_special */
	sat[23] = "DDDDDDDDDDDDDDDDDD/DDDDDDDDDD";    /*23 'G' punc_comment */
	sat[24] = "HHHHHHHHHHHHHHHHHHHHhHHHHHHHH";    /*24 'H' punc_space */
	sat[25] = "iiiiiiiiiiiiiiiiiiiiiiiiiiiii";    /*25 'I' save_special */
	sat[26] = "eeeeecceeeeeeeeeeeeeeeeeeeeee";    /*26 'J' to_e_digits */
	sat[27] = "IIIIIccIIIIIIIIIIIIIIIIIIIIII";    /*27 'K' to_fraction */
	sat[28] = "deeeeeeeeTeTeTeeeee%dedeeeeee";    /*28 'L' tv */
	sat[29] = "DDDDDDDDDDDDDDDDDD/DDDDDDDDDD";    /*29 'M' tv_comment */
	sat[30] = "eeeeeeeeeeeeeeeeee/eeeeeeeeee";    /*30 'N' tv_blank_comnt */
	sat[31] = "daayyaayaaYaaaaaaaa%dadaaaaaa";    /*31 'O' v_blanks */
	sat[32] = "DDDDDDDDDDDDDDDDDD/DDDDDDDDDD";    /*32 'P' v_comment */
	sat[33] = "eeeeeeeeeeeeeeeeee/eeeeeeeeee";    /*33 'Q' v_comment2 */
	sat[34] = "eeeeeeeeeeeeeeeeeeeeeeeeceeee";    /*34 'R' add_period */
	sat[35] = "DDDDDDDDDDDDDDDDDDDDDDDDcDDDD";    /*35 'S' var_period */
	sat[36] = "DDDDDDDDDDDDDDDDcccDDccDDDDcD";    /*36 'T' var_dot_dot */

