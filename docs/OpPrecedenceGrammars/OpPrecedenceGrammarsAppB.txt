The opcodes are organized as bytes, with byte extensions as needed, and long word
extensions for constants . The first 7 registers (either permanent or temporary) are
encoded directly into the opcode where possible, otherwise, the 3-bit field is left
equal to 0 and the full byte value follows as the next byte. The layout is described
below. The numbers indicate the total size of the instructi on when extension bytes
are needed; instructions containing "_ constant" and calls will require a 4 byte
constant term, which may need to be aligned depending on machine architecture.

%                                    Head
 nib2: 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0    | * | * . * . * . * . * . * . * | 2 |   .  get_cons .   .   .   |
1    | 3 | 2 get_struc(short). 2 . 2 | 2 |   .  unif_unsaft  .   .   |
2    | 2 |   get_list.   .   .   .   | 2 |   .  get_nil  .   .   .   |
3   _| 3 | 2 get_valt. 2 . 2 . 2 . 2 | 3 | 2 .  get_valp . 2 . 2 . 2 |
4    | 2 |   unify_vart  .   .   .   | 2 |   .  unify_varp   .   .   |
5    | 2 |   unify_valt  .   .   .   | 2 |   .  unify_valp   .   .   |
6    | 2 |   tunify_vart .   .   .   | 2 |   .  tunify_varp  .   .   |
7   _| 2 |   tunify_valt .   .   .   | 2 |   .  tunify_valp  .   .   |
8    | 3 | 2 . 2 . 2 . 2 . 2 . 2 . 2 | 3 | 2 . 2 . 2 . 2 . 2 . 2 . 2 |
9    | 2 | **.   .   .   .   .   .   | 2 |   .   .   .   .   .   .   |
A    | 2 |   . xx.   .   .   .   .   | 2 |   .   .   .   .   .   .   |
B   _| 2 |   .   . yy.   .   .   .   | 2 |   .   .   .   .   .   .   |
C    | 2 |   .   .   . zz.   .   .   | 2 |   .   .get_varp   .   .   |
D    | 2 |   .   get_vart. aa.   .   | 2 |   .   .   .   .   .   .   |
E    | 2 |   .   .   .   .   .   .   | 2 |   .   .   .   .   .   .   |
F   _| 2 |   .   .   .   .   .   .nop| 2 |   .   .   .   .   .   .   |
%
where
%         * - see below
%        ** - unif_unsafp
%        xx - unif_address
%        yy - get_cons_by_value
%        zz - unif_cons_by_value
%        aa - copy_valp  (copy perm to temp , used by state space)
%



%                                    Body
%
% Corresponding table for body codes is similar
% if put is substituted for get, push for unify, tpush for tunify,
% except -short getstrucs become putunsafs
% -get_val become put_vars and vice-versa
%
%
 nib2: 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0    | * | * . * . * . * . * . * . * | 2 |   .  put_cons .   .   .   |
1    | 2 |   put_struc   .   .   .   | 2 |   .  pushunsaft   .   .   |
2    | 2 |   put_list.   .   .   .   | 2 |   .  put_nil  .   .   .   |
3   _| 2 |   put_void.   .   .   .   | 3 | 2 .  put_varp . 2 . 2 . 2 |
4    | 2 |   push_vart   .   .   .   | 2 |   .  push_varp.   .   .   |
5    | 2 |   push_valt   .   .   .   | 2 |   .  push_valp.   .   .   |
6    | 2 |   tpush_vart  .   .   .   | 2 |   .  tpush_varp   .   .   |
7   _| 2 |   tpush_valt  .   .   .   | 2 |   .  tpush_valp   .   .   |
8    | 3 | 2 . 2 . 2 . 2 . 2 . 2 . 2 | 3 | 2 . 2 . 2 . 2 . 2 . 2 . 2 |
9    | 2 |   .   .   .   .   .   .   | 2 |   .   .   .   .   .   .   |
A    | 2 |   .   .   .   .   .   .   | 2 |   .   .   .   .   .   .   |
B   _| 2 |   .   .   .   .   .   .   | 2 |   .   .   .   .   .   .   |
C    | 2 |   .   .put_valt   .   .   | 2 |   .   .put_valp   .   .   |
D    | 2 |   .   .   .   .   .   .   | 2 |   .   .   .   .   .   .   |
E    | 2 |   .   .   .   .   .   .   | 2 |   .   .   .   .   .   .   |
F   _| 2 |   .   .   .   .   .   .nop| 2 |   .   .   .   .   .   .   |
%

%                                Body Escapes

% The first row contains basic call, exec, and opcodes. The rest
% is mainly inline filters and arithmetic.
%
 nib2: 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0    | * | * . * . * . * . * . * . * | 2 | * . * . * . * . * . * . * |
1    | 2 |   .   vart    .   .   .   | 2 |   .  varp .   .   .   .   |
2    | 2 |   .   tvart   .   .   .   | 2 |   .  tvarp.   .   .   .   |
3   _| * |   .   cut/failexit.   .   | 3 | 2 .  put_unsafe 2 . 2 . 2 |
4    | 2 |   .   testt   .   .   .   | 2 |   .  testp.   .   .   .   |
5    | 2 |   .   popvalt .   .   .   | 2 |   .  popvalp  .   .   .   |
6    | 2 |   .   evalt   .   .   .   | 2 |   .  evalp.   .   .   .   |
7   _| 2 |   .   popvart .   .   .   | 2 |   .  popvarp   .   .   |
8    | 3 | 2 . 2 . 2 . 2 . 2 . 2 . 2 | 3 | 2 . 2 . 2 . 2 . 2 . 2 . 2 |
9    | 2 |   .   .   .   .   .   .   |cut| + . - . * . //. / .mod. **|
A    | 2 |   .   .   .   .   .   .   | 2 |int.flt.flr.cei.rnd.max.min|
B   _| 2 |   .   .   .   .   .   .   | 2 |sqt.abs.exp. ln. ++. --.neg|
C    | 2 |   .   .put_vart   .   .   | 2 |sin.cos.tan.asn.acs.atn.   |
D    | 2 |   .   .   .   .   .   .   | 2 | ==. =<. >=. < . > . <>.   |
E    | 2 |   .   .   .   .   .   .   | 2 |mxi.mxr. pi.cpu.   .   .   |
F   _| 2 |   .   .   .   .   .   .nop| 2 |   .   .   .   .   .   .   |
%
%
%                 ** - label env
%
%      The first rows contain most of the instructions not referencing a
%      register: in more detail they are:
%
            head              body            body escapes
00   |   neck          |   proceed       |   break
01   |   unif_void     |   push_void     |   ecut
02   |   tunif_void    |   tpush_void    |   dcut
03   |   end_seq       |   push_end      |   push_nil
04   |   unif_cons(C)  |   push_cons(C)  |   eval_cons(C)
05   |   neckcons      |   noop          |   dealloc
06   |   alloc         |   dealloc       |   
07   |   unify_nil     |   escape        |   
08   |   get_cons      |   put_cons      |   
09   |   get_cons      |   put_cons      |   call indirect
0A   |   get_cons      |   put_cons      |   call
0B   |   get_cons      |   put_cons      |   exec indirect
0C   |   get_cons      |   put_cons      |   exec
0D   |   get_cons      |   put_cons      |   call clause$$/1
0E   |   get_cons      |   put_cons      |   exec $$exec/2
0F   |   get_cons      |   put_cons      |   fail
%
